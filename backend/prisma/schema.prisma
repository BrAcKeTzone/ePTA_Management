// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ENUMS
enum UserRole {
  ADMIN
  PARENT
}

enum LinkStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  EXCUSED
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
  TRANSFERRED
  DROPPED
  SUSPENDED
}

// AUTHENTICATION & USER MANAGEMENT
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  phone     String?
  role      UserRole @default(PARENT)
  isActive  Boolean  @default(true)

  // Admin-specific relations
  createdAnnouncements Announcement[]
  createdMeetings      Meeting[]
  createdProjects      Project[]
  recordedAttendance   Attendance[] @relation("RecordedBy")
  updatedSettings      Settings[]

  // Parent-specific relations
  students      Student[]
  attendances   Attendance[] @relation("ParentAttendance")
  contributions Contribution[]
  penalties     Penalty[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([email])
  @@index([role])
  @@index([isActive])
}

model Student {
  id             Int           @id @default(autoincrement())
  studentId      String        @unique
  firstName      String
  lastName       String
  middleName     String?
  academicYear   String        // e.g., "2023-2024", "2024-2025"
  yearLevel      String        // e.g., "1st Year", "2nd Year", "3rd Year", "4th Year"
  program        String        // e.g., "BSIT", "BSCS", "BSED", etc.
  section        String?       // e.g., "A", "B", "C"
  status         StudentStatus @default(ACTIVE)
  linkStatus     LinkStatus    @default(PENDING)
  enrollmentDate DateTime      @default(now())
  email          String?       @unique
  phone          String?

  parentId Int
  parent   User @relation(fields: [parentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId])
  @@index([lastName, firstName])
  @@index([parentId])
}

// MEETINGS, ATTENDANCE & PENALTIES
model Meeting {
  id          Int      @id @default(autoincrement())
  title       String
  date        DateTime
  minutes     String?  @db.Text
  resolutions String?  @db.Text

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById Int

  attendances Attendance[]
  penalties   Penalty[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id        Int              @id @default(autoincrement())
  status    AttendanceStatus

  meeting   Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  meetingId Int

  parent   User @relation("ParentAttendance", fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int

  recordedBy   User @relation("RecordedBy", fields: [recordedById], references: [id])
  recordedById Int

  hasPenalty Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([meetingId, parentId])
}

model Penalty {
  id          Int      @id @default(autoincrement())
  amount      Float
  reason      String
  isPaid      Boolean  @default(false)
  paidAt      DateTime?

  parent   User @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int

  meeting   Meeting? @relation(fields: [meetingId], references: [id])
  meetingId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// FINANCIALS & PROJECTS
model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?  @db.Text
  budget      Float
  startDate   DateTime
  endDate     DateTime?

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById Int

  contributions Contribution[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contribution {
  id        Int      @id @default(autoincrement())
  amount    Float
  date      DateTime

  parent   User @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int

  project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ANNOUNCEMENTS
enum AnnouncementPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TargetAudience {
  ALL
  PARENTS
  ADMINS
  SPECIFIC_PROGRAM
  SPECIFIC_YEAR_LEVEL
}

model Announcement {
  id             Int                   @id @default(autoincrement())
  title          String
  content        String                @db.Text
  priority       AnnouncementPriority  @default(MEDIUM)
  targetAudience TargetAudience        @default(ALL)
  
  // Optional filters for targeted announcements
  targetProgram   String?    // e.g., "BSIT", "BSCS" - used when targetAudience is SPECIFIC_PROGRAM
  targetYearLevel String?    // e.g., "1st Year", "2nd Year" - used when targetAudience is SPECIFIC_YEAR_LEVEL
  
  // Publishing controls
  isPublished Boolean  @default(false)
  publishDate DateTime?
  expiryDate  DateTime?
  
  // Optional attachment
  attachmentUrl  String?
  attachmentName String?

  createdBy   User @relation(fields: [createdById], references: [id])
  createdById Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([isPublished])
  @@index([publishDate])
  @@index([targetAudience])
}

// OTP
model Otp {
  id        Int      @id @default(autoincrement())
  email     String
  otp       String
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
}

// SYSTEM SETTINGS
model Settings {
  id  Int    @id @default(autoincrement())
  key String @unique // e.g., "system_config"

  // Penalty Settings
  penaltyRatePerAbsence    Float   @default(50.00) // Amount per absence
  penaltyRateLate          Float   @default(25.00) // Amount for late attendance
  penaltyGracePeriodDays   Int     @default(7)     // Days before penalty applies
  enableAutoPenalty        Boolean @default(true)  // Auto-calculate penalties

  // Contribution Settings
  monthlyContributionAmount  Float   @default(100.00) // Monthly dues
  projectContributionMinimum Float   @default(50.00)  // Minimum per project
  enableMandatoryContribution Boolean @default(true) // Require contributions

  // Payment Settings
  paymentBasis        String  @default("PER_STUDENT") // PER_STUDENT, PER_FAMILY, PER_MEETING
  allowPartialPayment Boolean @default(true)          // Allow partial payments
  paymentDueDays      Int     @default(30)            // Days to pay after due date

  // Meeting Settings
  minimumMeetingsPerYear     Int     @default(4)    // Required annual meetings
  quorumPercentage           Float   @default(50.0) // % needed for quorum
  notificationDaysBeforeMeet Int     @default(7)    // Days before meeting notification

  // Document Categories (stored as JSON)
  documentCategories String @db.Text

  // Academic Year Settings
  currentAcademicYear String @default("2024-2025")
  academicYearStart   String @default("08-01") // MM-DD format
  academicYearEnd     String @default("07-31") // MM-DD format

  // System Settings
  systemName          String  @default("JHCSC Dumingag Campus PTA")
  systemEmail         String  @default("pta@jhcsc.edu.ph")
  systemPhone         String? @default("+639123456789")
  enableEmailNotifications Boolean @default(true)
  enableSMSNotifications   Boolean @default(false)

  // Metadata
  updatedBy   User     @relation(fields: [updatedById], references: [id])
  updatedById Int
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  @@index([key])
}
