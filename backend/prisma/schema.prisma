// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ENUMS
enum UserRole {
  ADMIN
  PARENT
}

enum LinkStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  EXCUSED
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
  TRANSFERRED
  DROPPED
  SUSPENDED
}

enum MeetingType {
  GENERAL
  SPECIAL
  EMERGENCY
  COMMITTEE
  ANNUAL
  QUARTERLY
}

enum MeetingStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
  POSTPONED
}

// AUTHENTICATION & USER MANAGEMENT
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  phone     String?
  role      UserRole @default(PARENT)
  isActive  Boolean  @default(true)

  // Admin-specific relations
  createdAnnouncements Announcement[]
  createdMeetings      Meeting[]
  createdProjects      Project[]
  recordedAttendance   Attendance[] @relation("RecordedBy")
  updatedSettings      Settings[]

  // Parent-specific relations
  students      Student[]
  attendances   Attendance[] @relation("ParentAttendance")
  contributions Contribution[]
  penalties     Penalty[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([email])
  @@index([role])
  @@index([isActive])
}

model Student {
  id             Int           @id @default(autoincrement())
  studentId      String        @unique
  firstName      String
  lastName       String
  middleName     String?
  birthDate      DateTime?
  yearEnrolled   String        // e.g., "2024", "2025"
  status         StudentStatus @default(ACTIVE)
  linkStatus     LinkStatus    @default(PENDING)
  enrollmentDate DateTime      @default(now())

  parentId Int?
  parent   User? @relation(fields: [parentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId])
  @@index([lastName, firstName])
  @@index([parentId])
  @@index([yearEnrolled])
}

// MEETINGS, ATTENDANCE & PENALTIES
model Meeting {
  id          Int           @id @default(autoincrement())
  title       String
  description String?       @db.Text
  meetingType MeetingType   @default(GENERAL)
  status      MeetingStatus @default(SCHEDULED)
  
  // Scheduling
  date        DateTime
  startTime   String        // Format: HH:MM (24-hour), range: 07:00-21:00
  endTime     String        // Format: HH:MM (24-hour), range: 07:00-21:00
  venue       String        // Location of the meeting
  isVirtual   Boolean       @default(false)
  meetingLink String?       // For virtual meetings
  
  // Agenda & Documentation
  agenda         String?  @db.Text
  minutes        String?  @db.Text
  resolutions    String?  @db.Text
  minutesAddedAt DateTime?
  minutesAddedBy Int?
  
  // Attendance & Quorum
  expectedAttendees Int      @default(0)
  actualAttendees   Int      @default(0)
  quorumReached     Boolean  @default(false)
  quorumPercentage  Float?
  
  // Notifications
  notificationSent     Boolean  @default(false)
  notificationSentAt   DateTime?
  reminderSent         Boolean  @default(false)
  reminderSentAt       DateTime?
  
  // Relations
  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById Int

  attendances  Attendance[]
  penalties    Penalty[]
  attachments  MeetingAttachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([date])
  @@index([status])
  @@index([meetingType])
  @@index([createdById])
}

model MeetingAttachment {
  id        Int    @id @default(autoincrement())
  fileName  String
  fileUrl   String
  fileType  String // e.g., "pdf", "doc", "image"
  fileSize  Int    // in bytes
  uploadedBy Int
  
  meeting   Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  meetingId Int
  
  createdAt DateTime @default(now())
  
  @@index([meetingId])
}

model Attendance {
  id        Int              @id @default(autoincrement())
  status    AttendanceStatus @default(ABSENT)

  // Check-in/Check-out tracking
  checkInTime  DateTime?
  checkOutTime DateTime?
  isLate       Boolean  @default(false)
  lateMinutes  Int      @default(0)

  // Relations
  meeting   Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  meetingId Int

  parent   User @relation("ParentAttendance", fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int

  recordedBy   User @relation("RecordedBy", fields: [recordedById], references: [id])
  recordedById Int

  // Penalty tracking
  hasPenalty      Boolean  @default(false)
  penaltyAmount   Float?
  penaltyApplied  Boolean  @default(false)
  penaltyAppliedAt DateTime?

  // Additional notes
  remarks String? @db.Text
  excuseReason String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([meetingId, parentId])
  @@index([status])
  @@index([parentId])
  @@index([meetingId])
  @@index([hasPenalty])
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  GCASH
  PAYMAYA
  CHECK
  OTHER
}

enum PaymentStatus {
  UNPAID
  PARTIAL
  PAID
  WAIVED
  OVERDUE
}

model Penalty {
  id          Int           @id @default(autoincrement())
  amount      Float
  reason      String        @db.Text
  
  // Payment tracking
  paymentStatus PaymentStatus @default(UNPAID)
  isPaid        Boolean       @default(false)
  amountPaid    Float         @default(0)
  balance       Float
  paidAt        DateTime?
  
  // Payment details
  paymentMethod   PaymentMethod?
  paymentReference String?       // Reference number, check number, transaction ID
  paymentNotes     String?       @db.Text
  
  // Due date and reminders
  dueDate          DateTime?
  isOverdue        Boolean       @default(false)
  daysOverdue      Int           @default(0)
  reminderSent     Boolean       @default(false)
  reminderSentAt   DateTime?
  lastReminderDate DateTime?
  reminderCount    Int           @default(0)
  
  // Waiver/Discount
  isWaived      Boolean   @default(false)
  waivedAt      DateTime?
  waivedBy      Int?
  waiverReason  String?   @db.Text
  discountAmount Float?   @default(0)
  discountReason String?  @db.Text
  
  // Relations
  parent   User @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int

  meeting   Meeting? @relation(fields: [meetingId], references: [id])
  meetingId Int?
  
  payments PenaltyPayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([parentId])
  @@index([meetingId])
  @@index([paymentStatus])
  @@index([isPaid])
  @@index([isOverdue])
  @@index([dueDate])
}

model PenaltyPayment {
  id        Int           @id @default(autoincrement())
  amount    Float
  method    PaymentMethod
  reference String?       // Transaction reference
  notes     String?       @db.Text
  
  penalty   Penalty @relation(fields: [penaltyId], references: [id], onDelete: Cascade)
  penaltyId Int
  
  recordedBy   Int     // Admin who recorded the payment
  
  createdAt DateTime @default(now())
  
  @@index([penaltyId])
}

// FINANCIALS & PROJECTS
enum ProjectStatus {
  PLANNING       // In planning phase
  ACTIVE         // Currently active
  ON_HOLD        // Temporarily paused
  COMPLETED      // Successfully completed
  CANCELLED      // Project cancelled
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Project {
  id          Int            @id @default(autoincrement())
  name        String
  description String?        @db.Text
  
  // Financial tracking
  budget          Float
  totalRaised     Float      @default(0)
  totalExpenses   Float      @default(0)
  balance         Float      // Budget - totalExpenses
  
  // Status and priority
  status          ProjectStatus   @default(PLANNING)
  priority        ProjectPriority @default(MEDIUM)
  
  // Timeline
  startDate       DateTime
  endDate         DateTime?
  completedDate   DateTime?
  
  // Goals and targets
  fundingGoal     Float?         // Specific fundraising target
  targetBeneficiaries Int?       // Number of people/students to benefit
  
  // Progress tracking
  progressPercentage Float @default(0) // Overall progress 0-100
  
  // Location/Venue
  location        String?
  venue           String?
  
  // Documentation
  attachments     String?     @db.Text  // JSON array of file URLs
  notes           String?     @db.Text  // Additional notes
  
  // Relations
  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById Int

  contributions Contribution[]
  expenses      ProjectExpense[]
  updates       ProjectUpdate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([status])
  @@index([priority])
  @@index([createdById])
}

// Project expenses/spending
model ProjectExpense {
  id          Int      @id @default(autoincrement())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int
  
  title       String
  description String?  @db.Text
  amount      Float
  category    String?  // e.g., "Materials", "Labor", "Transportation"
  
  expenseDate DateTime @default(now())
  
  receipt     String?  // Receipt file URL
  notes       String?  @db.Text
  
  recordedBy  Int      // User who recorded the expense
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([projectId])
  @@index([expenseDate])
}

// Project updates/milestones
model ProjectUpdate {
  id          Int      @id @default(autoincrement())
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int
  
  title       String
  content     String   @db.Text
  
  isPublic    Boolean  @default(true)  // Visible to parents
  isMilestone Boolean  @default(false) // Mark as important milestone
  
  attachments String?  @db.Text  // JSON array of file URLs
  
  postedBy    Int      // User who posted the update
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([projectId])
  @@index([isMilestone])
}


// CONTRIBUTIONS
enum ContributionType {
  MONTHLY        // Regular monthly contribution
  PROJECT        // Project-specific contribution
  SPECIAL        // Special fundraising
  DONATION       // Voluntary donation
  MEMBERSHIP     // Membership fee
  EVENT          // Event-specific contribution
}

enum ContributionStatus {
  PENDING        // Awaiting payment
  PARTIAL        // Partially paid
  PAID           // Fully paid
  OVERDUE        // Past due date
  WAIVED         // Contribution waived
}

model Contribution {
  id        Int                 @id @default(autoincrement())
  
  // Basic information
  type            ContributionType
  title           String            // e.g., "Monthly Contribution - October 2024"
  description     String?           @db.Text
  amount          Float             // Total expected amount
  amountPaid      Float             @default(0)
  balance         Float             // Remaining balance
  
  // Payment status
  status          ContributionStatus @default(PENDING)
  isPaid          Boolean           @default(false)
  paidAt          DateTime?
  
  // Payment details
  paymentMethod   PaymentMethod?
  paymentReference String?          // Reference number, transaction ID
  paymentNotes     String?          @db.Text
  
  // Due date and reminders
  dueDate          DateTime?
  isOverdue        Boolean          @default(false)
  daysOverdue      Int              @default(0)
  reminderSent     Boolean          @default(false)
  reminderSentAt   DateTime?
  lastReminderDate DateTime?
  reminderCount    Int              @default(0)
  
  // Waiver/Adjustment
  isWaived        Boolean   @default(false)
  waivedAt        DateTime?
  waivedBy        Int?
  waiverReason    String?   @db.Text
  adjustmentAmount Float?   @default(0)
  adjustmentReason String?  @db.Text
  
  // Academic year and period
  academicYear String?              // e.g., "2024-2025"
  period       String?              // e.g., "October", "1st Semester"
  
  // Relations
  parent   User @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int

  project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?
  
  payments ContributionPayment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([parentId])
  @@index([projectId])
  @@index([type])
  @@index([status])
  @@index([isPaid])
  @@index([isOverdue])
  @@index([dueDate])
  @@index([academicYear])
}

model ContributionPayment {
  id             Int           @id @default(autoincrement())
  amount         Float
  method         PaymentMethod
  reference      String?       // Transaction reference
  notes          String?       @db.Text
  
  contribution   Contribution  @relation(fields: [contributionId], references: [id], onDelete: Cascade)
  contributionId Int
  
  recordedBy Int              // User who recorded the payment
  
  createdAt DateTime @default(now())
  
  @@index([contributionId])
}

// ANNOUNCEMENTS
enum AnnouncementPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TargetAudience {
  ALL
  PARENTS
  ADMINS
  SPECIFIC_PROGRAM
  SPECIFIC_YEAR_LEVEL
}

model Announcement {
  id             Int                   @id @default(autoincrement())
  title          String
  content        String                @db.Text
  priority       AnnouncementPriority  @default(MEDIUM)
  targetAudience TargetAudience        @default(ALL)
  
  // Optional filters for targeted announcements
  targetProgram   String?    // e.g., "BSIT", "BSCS" - used when targetAudience is SPECIFIC_PROGRAM
  targetYearLevel String?    // e.g., "1st Year", "2nd Year" - used when targetAudience is SPECIFIC_YEAR_LEVEL
  
  // Publishing controls
  isPublished Boolean  @default(false)
  publishDate DateTime?
  expiryDate  DateTime?
  
  // Optional attachment
  attachmentUrl  String?
  attachmentName String?

  createdBy   User @relation(fields: [createdById], references: [id])
  createdById Int

  readBy      AnnouncementRead[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([isPublished])
  @@index([publishDate])
  @@index([targetAudience])
}

// Track which users have read which announcements
model AnnouncementRead {
  id             Int          @id @default(autoincrement())
  
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId Int
  
  userId         Int
  
  readAt         DateTime     @default(now())
  
  @@unique([announcementId, userId])
  @@index([userId])
  @@index([announcementId])
}

// OTP
model Otp {
  id        Int      @id @default(autoincrement())
  email     String
  otp       String
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
}

// SYSTEM SETTINGS
model Settings {
  id  Int    @id @default(autoincrement())
  key String @unique // e.g., "system_config"

  // Penalty Settings
  penaltyRatePerAbsence    Float   @default(50.00) // Amount per absence
  penaltyRateLate          Float   @default(25.00) // Amount for late attendance
  penaltyGracePeriodDays   Int     @default(7)     // Days before penalty applies
  enableAutoPenalty        Boolean @default(true)  // Auto-calculate penalties

  // Contribution Settings
  monthlyContributionAmount  Float   @default(100.00) // Monthly dues
  projectContributionMinimum Float   @default(50.00)  // Minimum per project
  enableMandatoryContribution Boolean @default(true) // Require contributions

  // Payment Settings
  paymentBasis        String  @default("PER_STUDENT") // PER_STUDENT, PER_FAMILY, PER_MEETING
  allowPartialPayment Boolean @default(true)          // Allow partial payments
  paymentDueDays      Int     @default(30)            // Days to pay after due date

  // Meeting Settings
  minimumMeetingsPerYear     Int     @default(4)    // Required annual meetings
  quorumPercentage           Float   @default(50.0) // % needed for quorum
  notificationDaysBeforeMeet Int     @default(7)    // Days before meeting notification

  // Document Categories (stored as JSON)
  documentCategories String @db.Text

  // Academic Year Settings
  currentAcademicYear String @default("2024-2025")
  academicYearStart   String @default("08-01") // MM-DD format
  academicYearEnd     String @default("07-31") // MM-DD format

  // System Settings
  systemName          String  @default("JHCSC Dumingag Campus PTA")
  systemEmail         String  @default("pta@jhcsc.edu.ph")
  systemPhone         String? @default("+639123456789")
  enableEmailNotifications Boolean @default(true)
  enableSMSNotifications   Boolean @default(false)

  // Metadata
  updatedBy   User     @relation(fields: [updatedById], references: [id])
  updatedById Int
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  @@index([key])
}
